(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Options/Classes/Motion", "./MotionInstance"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadMotionPlugin = void 0;
    const Motion_1 = require("./Options/Classes/Motion");
    const MotionInstance_1 = require("./MotionInstance");
    class MotionPlugin {
        constructor(engine) {
            this.id = "motion";
            this._engine = engine;
        }
        getPlugin(container) {
            return new MotionInstance_1.MotionInstance(container, this._engine);
        }
        loadOptions(options, source) {
            if (!this.needsPlugin()) {
                return;
            }
            let motionOptions = options.motion;
            if ((motionOptions === null || motionOptions === void 0 ? void 0 : motionOptions.load) === undefined) {
                options.motion = motionOptions = new Motion_1.Motion();
            }
            motionOptions.load(source === null || source === void 0 ? void 0 : source.motion);
        }
        needsPlugin() {
            return true;
        }
    }
    async function loadMotionPlugin(engine) {
        const plugin = new MotionPlugin(engine);
        await engine.addPlugin(plugin);
    }
    exports.loadMotionPlugin = loadMotionPlugin;
});
