import { safeMatchMedia } from "tsparticles-engine";
export class MotionInstance {
    constructor(container, engine) {
        this._container = container;
        this._engine = engine;
    }
    async init() {
        const container = this._container, options = container.actualOptions.motion;
        if (options && (options.disable || options.reduce.value)) {
            const mediaQuery = safeMatchMedia("(prefers-reduced-motion: reduce)");
            if (mediaQuery) {
                this._handleMotionChange(mediaQuery);
                const handleChange = async () => {
                    this._handleMotionChange(mediaQuery);
                    try {
                        await container.refresh();
                    }
                    catch (_a) {
                    }
                };
                if (mediaQuery.addEventListener !== undefined) {
                    mediaQuery.addEventListener("change", handleChange);
                }
                else if (mediaQuery.addListener !== undefined) {
                    mediaQuery.addListener(handleChange);
                }
            }
            else {
                container.retina.reduceFactor = 1;
            }
        }
        else {
            container.retina.reduceFactor = 1;
        }
    }
    _handleMotionChange(mediaQuery) {
        const container = this._container, motion = container.actualOptions.motion;
        if (!motion) {
            return;
        }
        container.retina.reduceFactor = mediaQuery.matches
            ? motion.disable
                ? 0
                : motion.reduce.value
                    ? 1 / motion.reduce.factor
                    : 1
            : 1;
    }
}
