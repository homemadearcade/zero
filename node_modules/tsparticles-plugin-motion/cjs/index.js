"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadMotionPlugin = void 0;
const Motion_1 = require("./Options/Classes/Motion");
const MotionInstance_1 = require("./MotionInstance");
class MotionPlugin {
    constructor(engine) {
        this.id = "motion";
        this._engine = engine;
    }
    getPlugin(container) {
        return new MotionInstance_1.MotionInstance(container, this._engine);
    }
    loadOptions(options, source) {
        if (!this.needsPlugin()) {
            return;
        }
        let motionOptions = options.motion;
        if ((motionOptions === null || motionOptions === void 0 ? void 0 : motionOptions.load) === undefined) {
            options.motion = motionOptions = new Motion_1.Motion();
        }
        motionOptions.load(source === null || source === void 0 ? void 0 : source.motion);
    }
    needsPlugin() {
        return true;
    }
}
function loadMotionPlugin(engine) {
    return __awaiter(this, void 0, void 0, function* () {
        const plugin = new MotionPlugin(engine);
        yield engine.addPlugin(plugin);
    });
}
exports.loadMotionPlugin = loadMotionPlugin;
