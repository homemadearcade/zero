"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MotionInstance = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
class MotionInstance {
    constructor(container, engine) {
        this._container = container;
        this._engine = engine;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const container = this._container, options = container.actualOptions.motion;
            if (options && (options.disable || options.reduce.value)) {
                const mediaQuery = (0, tsparticles_engine_1.safeMatchMedia)("(prefers-reduced-motion: reduce)");
                if (mediaQuery) {
                    this._handleMotionChange(mediaQuery);
                    const handleChange = () => __awaiter(this, void 0, void 0, function* () {
                        this._handleMotionChange(mediaQuery);
                        try {
                            yield container.refresh();
                        }
                        catch (_a) {
                        }
                    });
                    if (mediaQuery.addEventListener !== undefined) {
                        mediaQuery.addEventListener("change", handleChange);
                    }
                    else if (mediaQuery.addListener !== undefined) {
                        mediaQuery.addListener(handleChange);
                    }
                }
                else {
                    container.retina.reduceFactor = 1;
                }
            }
            else {
                container.retina.reduceFactor = 1;
            }
        });
    }
    _handleMotionChange(mediaQuery) {
        const container = this._container, motion = container.actualOptions.motion;
        if (!motion) {
            return;
        }
        container.retina.reduceFactor = mediaQuery.matches
            ? motion.disable
                ? 0
                : motion.reduce.value
                    ? 1 / motion.reduce.factor
                    : 1
            : 1;
    }
}
exports.MotionInstance = MotionInstance;
