{"version":3,"sources":["../../src/services/aws.js"],"names":["dotenv","config","AWS","Config","accessKeyId","process","env","S3_KEY","secretAccessKey","S3_SECRET","region","BUCKET_REGION","s3","S3","Bucket","BUCKET_NAME","generateGetUrl","Key","Promise","resolve","reject","params","Expires","getSignedUrl","err","url","console","log","generatePutUrl","ContentType"],"mappings":";;;;;;;AAAA;;AACA;;;;AAD2B;AACE;AAC7BA,gBAAOC,MAAP,G,CAEA;;;AACAC,gBAAID,MAAJ,GAAa,IAAIC,gBAAIC,MAAR,CAAe;AAC1BC,EAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,MADC;AACO;AACjCC,EAAAA,eAAe,EAAEH,OAAO,CAACC,GAAR,CAAYG,SAFH;AAEc;AACxCC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK,aAHM,CAGQ;;AAHR,CAAf,CAAb,C,CAMA;;AACA,MAAMC,EAAE,GAAG,IAAIV,gBAAIW,EAAR,EAAX,C,CAEA;;AACA,MAAMC,MAAM,GAAGT,OAAO,CAACC,GAAR,CAAYS,WAA3B,C,CAEA;AACA;AACA;AAEA;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAG;AACbP,MAAAA,MADa;AAEbG,MAAAA,GAFa;AAGbK,MAAAA,OAAO,EAAE,GAHI,CAGA;;AAHA,KAAf,CADsC,CAMtC;;AACAV,IAAAA,EAAE,CAACW,YAAH,CAAgB,WAAhB,EAA6BF,MAA7B,EAAqC,CAACG,GAAD,EAAMC,GAAN,KAAc;AACjD,UAAID,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACAJ,QAAAA,MAAM,CAACI,GAAD,CAAN;AACD,OAHD,MAGO;AACL;AACAL,QAAAA,OAAO,CAACM,GAAD,CAAP;AACD;AACF,KARD;AASD,GAhBM,CAAP;AAiBD,C,CAED;;;AACA,SAASG,cAAT,CAAwBX,GAAxB,EAA6BY,WAA7B,EAA0C;AACxC,SAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMC,MAAM,GAAG;AAAEP,MAAAA,MAAF;AAAUG,MAAAA,GAAV;AAAeY,MAAAA;AAAf,KAAf,CAFsC,CAGtC;;AACAjB,IAAAA,EAAE,CAACW,YAAH,CAAgB,WAAhB,EAA6BF,MAA7B,EAAqC,UAASG,GAAT,EAAcC,GAAd,EAAmB;AACtD,UAAID,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;AACAJ,QAAAA,MAAM,CAACI,GAAD,CAAN;AACD,OAJqD,CAKtD;;;AACAL,MAAAA,OAAO,CAACM,GAAD,CAAP;AACD,KAPD;AAQD,GAZM,CAAP;AAaD,C,CAED;;;eACe;AAAET,EAAAA,cAAF;AAAkBY,EAAAA;AAAlB,C","sourcesContent":["import AWS from 'aws-sdk'; // Requiring AWS SDK.\nimport dotenv from 'dotenv'; // Loading dotenv to have access to env variables\ndotenv.config()\n\n// Configuring AWS\nAWS.config = new AWS.Config({\n  accessKeyId: process.env.S3_KEY, // stored in the .env file\n  secretAccessKey: process.env.S3_SECRET, // stored in the .env file\n  region: process.env.BUCKET_REGION // This refers to your bucket configuration.\n});\n\n// Creating a S3 instance\nconst s3 = new AWS.S3();\n\n// Retrieving the bucket name from env variable\nconst Bucket = process.env.BUCKET_NAME;\n\n// In order to create pre-signed GET adn PUT URLs we use the AWS SDK s3.getSignedUrl method.\n// getSignedUrl(operation, params, callback) â‡’ String\n// For more information check the AWS documentation: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html\n\n// GET URL Generator\nfunction generateGetUrl(Key) {\n  return new Promise((resolve, reject) => {\n    const params = {\n      Bucket,\n      Key,\n      Expires: 120 // 2 minutes\n    };\n    // Note operation in this case is getObject\n    s3.getSignedUrl('getObject', params, (err, url) => {\n      if (err) {\n        console.log('ERROR', err)\n        reject(err);\n      } else {\n        // If there is no errors we will send back the pre-signed GET URL\n        resolve(url);\n      }\n    });\n  });\n}\n\n// PUT URL Generator\nfunction generatePutUrl(Key, ContentType) {\n  return new Promise((resolve, reject) => {\n    // Note Bucket is retrieved from the env variable above.\n    const params = { Bucket, Key, ContentType };\n    // Note operation in this case is putObject\n    s3.getSignedUrl('putObject', params, function(err, url) {\n      if (err) {\n        console.log('ERROR', err)\n        reject(err);\n      }\n      // If there is no errors we can send back the pre-signed PUT URL\n      resolve(url);\n    });\n  });\n}\n\n// Finally, we export the methods so we can use it in our main application.\nexport default { generateGetUrl, generatePutUrl };\n"],"file":"aws.js"}