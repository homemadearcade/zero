{"version":3,"sources":["../src/index.js"],"names":["app","post","req","res","startTime","Date","getTime","dataSize","on","data","length","currentTime","duration","bitsLoaded","speedMbps","toFixed","status","send","get","spriteSheetIds","query","sss","forEach","id","__dirname","parsedData","JSON","parse","push","spriteSheets","use","express","json","urlencoded","extended","passport","initialize","require","isProduction","process","env","NODE_ENV","dbConnection","MONGO_URI_PROD","MONGO_URI_DEV","mongoose","connect","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","then","console","log","onMongoDBConnected","e","exit","catch","err","routes","static","server","port","sendFile","PORT","http","Server","httpsOptions","key","cert","https","createServer","io","socketSessions","InMemorySessionStore","set","listen","socket","token","secretOrKey","JWT_SECRET_PROD","JWT_SECRET_DEV","decoded","jsonwebtoken","verify","email","user","User","findOne","trim","username","lobbys","lobby","users","connected","join","to","emit","ON_LOBBY_UPDATE","ON_AUTHENTICATE_SOCKET_SUCCESS","saveSession","ON_AUTHENTICATE_SOCKET_FAIL","error","ON_COBROWSING_STATUS_UPDATE","payload","lobbyId","ON_LOBBY_USER_STATUS_UPDATE","ON_GAME_INSTANCE_UPDATE","Lobby","find","populate","path","model","map","lob","toJSON","participants","role","joined"],"mappings":"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","sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport https from 'https';\nimport { readFileSync, writeFile } from 'fs';\nimport { resolve, join } from 'path';\nimport passport from 'passport';\nimport http from 'http';\nimport morgan from 'morgan'\nimport { Server } from \"socket.io\"\n// import all_routes from 'express-list-endpoints';\nimport jsonwebtoken from 'jsonwebtoken';\n\nimport routes from './routes';\n// import { seedDb } from './utils/seed';\n\nimport User from './models/User';\nimport { InMemorySessionStore } from './utils/sessionStore';\nimport { ON_AUTHENTICATE_SOCKET_FAIL, ON_LOBBY_UPDATE, ON_AUTHENTICATE_SOCKET_SUCCESS, ON_COBROWSING_STATUS_UPDATE, ON_GAME_INSTANCE_UPDATE, ON_LOBBY_USER_STATUS_UPDATE } from './constants';\nimport Lobby from './models/Lobby';\n\nconst app = express();\n\napp.post('/uploadtest', (req, res) => {\n  let startTime = new Date().getTime();\n  let dataSize = 0;\n\n  // Each time data is received, report the number of bits each second\n  req.on('data', (data) => {\n    dataSize += data.length;\n  });\n\n  // When all data is received, log it and close the connection;\n  req.on('end', () => {\n    let currentTime = new Date().getTime();\n    let duration =  (currentTime - startTime)/1000;\n    var bitsLoaded = dataSize * 8;\n    var speedMbps = ((bitsLoaded / duration) / 1024 / 1024).toFixed(2);\n    res.status(200).send({ });\n  })\n})\n\n// function saveSpriteSheet(id, json) {\n//   writeFile(resolve(__dirname, '../../data/sprite/' + id + '.json'), JSON.stringify(json), 'utf8', (e) => {\n//     if(e) return console.log(e)\n//     else console.log('spritesheet: ' + id + ' saved')\n//   });\n// }\n\n// parsedData.sprites  = parsedData.sprites.map((sprite, index) => {\n//   return {\n//     ...sprite,\n//     name: null,\n//     id: 'sprite'+index,\n//     textureId: id + '-' + 'sprite' +index,\n//   }\n// })\n\n// saveSpriteSheet(id, parsedData)\n\napp.get('/spriteSheets', (req,res)=>{\n  const { spriteSheetIds } =  req.query;\n\n  const sss = []\n  spriteSheetIds.forEach((id) => {\n    const data = readFileSync(resolve(__dirname, '../../data/sprite/' +id+'.json'), 'utf8')\n    const parsedData = JSON.parse(data)\n    sss.push(parsedData)\n  })\n\n  res.send({spriteSheets: sss})\n})\n\n\n// Bodyparser Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n// app.use(morgan('combined'))\n\napp.use(passport.initialize());\nrequire('./services/jwtStrategy');\nrequire('./services/googleStrategy');\nrequire('./services/localStrategy');\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// DB Config\nconst dbConnection = isProduction ? process.env.MONGO_URI_PROD : process.env.MONGO_URI_DEV;\n\n// Connect to Mongo\nmongoose\n  .connect(dbConnection, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n  })\n  .then(async () => {\n    console.log('MongoDB Connected...');\n    try {\n      onMongoDBConnected()\n    } catch(e) {\n      console.log(e) \n      process.exit()\n    } \n\n  })\n  .catch((err) => console.log(err));\n\n// Use Routes\napp.use('/', routes);\napp.use('/public', express.static(join(__dirname, '../public')));\n\nlet server;\nlet port;\n// Serve static assets if in production\nif (isProduction) {\n  // Set static folder\n  app.use(express.static(join(__dirname, '../../client/build')));\n\n  app.get('*', (req, res) => {\n    res.sendFile(resolve(__dirname, '../..', 'client', 'build', 'index.html')); // index is in /server/src so 2 folders up\n  });\n\n  port = process.env.PORT || 80;\n\n  server = http.Server(app)\n} else {\n  port = process.env.PORT || 5000;\n\n  const httpsOptions = {\n    key: readFileSync(resolve(__dirname, '../security/cert.key')),\n    cert: readFileSync(resolve(__dirname, '../security/cert.pem')),\n  };\n\n  server = https.createServer(httpsOptions, app)\n}\n\n// Listen for requests\nconst io = new Server(server, { /* options */ });\n\nconst socketSessions = new InMemorySessionStore()\n\napp.set('socketio', io);\napp.set('socketSessions', socketSessions);\n\nserver.listen(port, () => console.log(`Server started on port ${port}`));\n\nio.on(\"connection\", (socket) => {  \n\n  // this event is called after a user is logged in and also after a socket is reconnected\n  socket.on('authenticate', async ({token}) => {\n    if (token) {\n      const isProduction = process.env.NODE_ENV === 'production';\n      const secretOrKey = isProduction ? process.env.JWT_SECRET_PROD : process.env.JWT_SECRET_DEV;\n  \n      const decoded = jsonwebtoken.verify(token, secretOrKey)\n      const email = decoded.email\n      const user = await User.findOne({ email: email.trim() });\n  \n      if (user) {\n        socket.user = {\n          email: user.email,\n          id: user.id,\n          username: user.username,\n        }\n\n        const lobbys = app.get('lobbys')\n        lobbys.forEach((lobby) => {\n          lobby.users.forEach((user) => {\n            if(user.id === socket.user.id) {\n              user.connected = true\n              socket.join(lobby.id);\n              io.to(lobby.id).emit(ON_LOBBY_UPDATE, {lobby});\n            }\n          })\n        })\n  \n        socket.emit(ON_AUTHENTICATE_SOCKET_SUCCESS)\n        socketSessions.saveSession(user.id, socket);\n      } else {\n        socket.emit(ON_AUTHENTICATE_SOCKET_FAIL, { error: 'no such user'})\n      }\n    } else {\n      socket.emit(ON_AUTHENTICATE_SOCKET_FAIL, { error: 'no token for socket'})\n    }\n  })\n\n  socket.on(ON_COBROWSING_STATUS_UPDATE, (payload) => {\n    io.to('admins@'+payload.lobbyId).emit(ON_COBROWSING_STATUS_UPDATE, payload)\n  })\n\n  socket.on(ON_LOBBY_USER_STATUS_UPDATE, (payload) => {\n    io.to(payload.lobbyId).emit(ON_LOBBY_USER_STATUS_UPDATE, payload)\n  })\n\n  socket.on(ON_GAME_INSTANCE_UPDATE, (payload) => {\n    io.to(payload.lobbyId).emit(ON_GAME_INSTANCE_UPDATE, payload)\n  })\n\n  socket.on(\"disconnect\", async () => {\n    if(socket.user?.id) {\n      const lobbys = app.get('lobbys')\n      lobbys.forEach((lobby) => {\n        lobby.users.forEach((user) => {\n          if(user.id === socket.user.id) {\n            user.connected = false\n            io.to(lobby.id).emit(ON_LOBBY_UPDATE, {lobby});\n          }\n        })\n      })\n    }\n  });\n});\n\nasync function onMongoDBConnected() {\n  let lobbys = (await Lobby.find().populate('participants game').populate({\n    path: 'game',\n    populate: {\n      path: 'user',\n      model: 'User'\n    }\n  }))\n  \n  if(lobbys) {\n    lobbys =  lobbys.map((lob) => {\n      const lobby = lob.toJSON()\n      return {\n        ...lobby,\n        users: lobby.participants.map((user) => {\n          return {\n            email: user.email,\n            id: user.id,\n            username: user.username,\n            role: user.role,\n            joined: false,\n            connected: false\n          }\n        })\n      }\n    })\n\n    app.set('lobbys', lobbys);  \n  } else {\n    app.set('lobbys', []);  \n\n  }\n}"],"file":"index.js"}