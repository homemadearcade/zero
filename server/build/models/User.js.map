{"version":3,"sources":["../../src/models/User.js"],"names":["Schema","mongoose","userSchema","provider","type","String","required","username","lowercase","unique","match","index","email","password","trim","minlength","maxlength","avatar","role","default","bio","googleId","sparse","timestamps","methods","toJSON","absoluteAvatarFilePath","__dirname","process","env","IMAGES_FOLDER_PATH","fs","existsSync","id","_id","toString","createdAt","updatedAt","isProduction","NODE_ENV","secretOrKey","JWT_SECRET_PROD","JWT_SECRET_DEV","generateJWT","token","jwt","sign","expiresIn","registerUser","newUser","callback","bcrypt","genSalt","err","salt","hash","errh","console","log","save","comparePassword","candidatePassword","compare","isMatch","hashPassword","saltRounds","hashedPassword","Promise","resolve","reject","validateUser","user","schema","Joi","any","string","min","max","regex","allow","validate","User","model"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,iBAAnB;AAEA,MAAMC,UAAU,GAAG,IAAIF,MAAJ,CACjB;AACEG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GADZ;AAKEC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEC,MADE;AAERG,IAAAA,SAAS,EAAE,IAFH;AAGRC,IAAAA,MAAM,EAAE,IAHA;AAIRH,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,gBAAP,CAJF;AAKRI,IAAAA,KAAK,EAAE,CAAC,iBAAD,EAAoB,YAApB,CALC;AAMRC,IAAAA,KAAK,EAAE;AANC,GALZ;AAaEC,EAAAA,KAAK,EAAE;AACLR,IAAAA,IAAI,EAAEC,MADD;AAELG,IAAAA,SAAS,EAAE,IAFN;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILH,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,gBAAP,CAJL;AAKLI,IAAAA,KAAK,EAAE,CAAC,cAAD,EAAiB,YAAjB,CALF;AAMLC,IAAAA,KAAK,EAAE;AANF,GAbT;AAqBEE,EAAAA,QAAQ,EAAE;AACRT,IAAAA,IAAI,EAAEC,MADE;AAERS,IAAAA,IAAI,EAAE,IAFE;AAGRC,IAAAA,SAAS,EAAE,CAHH;AAIRC,IAAAA,SAAS,EAAE;AAJH,GArBZ;AA2BEC,EAAAA,MAAM,EAAEZ,MA3BV;AA4BEa,EAAAA,IAAI,EAAE;AAAEd,IAAAA,IAAI,EAAEC,MAAR;AAAgBc,IAAAA,OAAO,EAAE;AAAzB,GA5BR;AA6BEC,EAAAA,GAAG,EAAEf,MA7BP;AA8BE;AACAgB,EAAAA,QAAQ,EAAE;AACRjB,IAAAA,IAAI,EAAEC,MADE;AAERI,IAAAA,MAAM,EAAE,IAFA;AAGRa,IAAAA,MAAM,EAAE;AAHA,GA/BZ,CAoCE;AACA;AACA;AACA;AACA;AACA;AACA;;AA1CF,CADiB,EA6CjB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CA7CiB,CAAnB,C,CAgDA;;AAEArB,UAAU,CAACsB,OAAX,CAAmBC,MAAnB,GAA4B,YAAY;AACtC;AACA,QAAMC,sBAAsB,GAAI,GAAE,gBAAKC,SAAL,EAAgB,OAAhB,EAAyBC,OAAO,CAACC,GAAR,CAAYC,kBAArC,CAAyD,GAAE,KAAKb,MAAO,EAAzG;AACA,QAAMA,MAAM,GAAG,uBAAW,KAAKA,MAAhB,IACX,KAAKA,MADM,GAEXc,YAAGC,UAAH,CAAcN,sBAAd,IACC,GAAEE,OAAO,CAACC,GAAR,CAAYC,kBAAmB,GAAE,KAAKb,MAAO,EADhD,GAEC,GAAEW,OAAO,CAACC,GAAR,CAAYC,kBAAmB,aAJtC;AAMA,SAAO;AACLG,IAAAA,EAAE,EAAE,KAAKC,GAAL,CAASC,QAAT,EADC;AAELhC,IAAAA,QAAQ,EAAE,KAAKA,QAFV;AAGLS,IAAAA,KAAK,EAAE,KAAKA,KAHP;AAILL,IAAAA,QAAQ,EAAE,KAAKA,QAJV;AAKLU,IAAAA,MAAM,EAAEA,MALH;AAML;AACAC,IAAAA,IAAI,EAAE,KAAKA,IAPN;AAQLkB,IAAAA,SAAS,EAAE,KAAKA,SARX;AASLC,IAAAA,SAAS,EAAE,KAAKA;AATX,GAAP;AAWD,CApBD;;AAsBA,MAAMC,YAAY,GAAGV,OAAO,CAACC,GAAR,CAAYU,QAAZ,KAAyB,YAA9C;AACA,MAAMC,WAAW,GAAGF,YAAY,GAAGV,OAAO,CAACC,GAAR,CAAYY,eAAf,GAAiCb,OAAO,CAACC,GAAR,CAAYa,cAA7E;;AAEAxC,UAAU,CAACsB,OAAX,CAAmBmB,WAAnB,GAAiC,YAAY;AAC3C,QAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CACZ;AACEC,IAAAA,SAAS,EAAE,KADb;AAEEd,IAAAA,EAAE,EAAE,KAAKC,GAFX;AAGE/B,IAAAA,QAAQ,EAAE,KAAKA,QAHjB;AAIES,IAAAA,KAAK,EAAE,KAAKA;AAJd,GADY,EAOZ4B,WAPY,CAAd;;AASA,SAAOI,KAAP;AACD,CAXD;;AAaA1C,UAAU,CAACsB,OAAX,CAAmBwB,YAAnB,GAAkC,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACvDC,oBAAOC,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChCH,sBAAOI,IAAP,CAAYN,OAAO,CAACpC,QAApB,EAA8ByC,IAA9B,EAAoC,CAACE,IAAD,EAAOD,IAAP,KAAgB;AAClD,UAAIF,GAAJ,EAAS;AACPI,QAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACD,OAHiD,CAIlD;;;AACAJ,MAAAA,OAAO,CAACpC,QAAR,GAAmB0C,IAAnB;AACAN,MAAAA,OAAO,CAACU,IAAR,CAAaT,QAAb;AACD,KAPD;AAQD,GATD;AAUD,CAXD;;AAaAhD,UAAU,CAACsB,OAAX,CAAmBoC,eAAnB,GAAqC,UAAUC,iBAAV,EAA6BX,QAA7B,EAAuC;AAC1EC,oBAAOW,OAAP,CAAeD,iBAAf,EAAkC,KAAKhD,QAAvC,EAAiD,CAACwC,GAAD,EAAMU,OAAN,KAAkB;AACjE,QAAIV,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACTH,IAAAA,QAAQ,CAAC,IAAD,EAAOa,OAAP,CAAR;AACD,GAHD;AAID,CALD,C,CAOA;;;AAEO,eAAeC,YAAf,CAA4BnD,QAA5B,EAAsC;AAC3C,QAAMoD,UAAU,GAAG,EAAnB;AAEA,QAAMC,cAAc,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5DlB,sBAAOI,IAAP,CAAY1C,QAAZ,EAAsBoD,UAAtB,EAAkC,UAAUZ,GAAV,EAAeE,IAAf,EAAqB;AACrD,UAAIF,GAAJ,EAASgB,MAAM,CAAChB,GAAD,CAAN,CAAT,KACKe,OAAO,CAACb,IAAD,CAAP;AACN,KAHD;AAID,GAL4B,CAA7B;AAOA,SAAOW,cAAP;AACD;;AAEM,MAAMI,YAAY,GAAIC,IAAD,IAAU;AACpC,QAAMC,MAAM,GAAG;AACbvD,IAAAA,MAAM,EAAEwD,aAAIC,GAAJ,EADK;AAEb;AACAnE,IAAAA,QAAQ,EAAEkE,aAAIE,MAAJ,GACPC,GADO,CACH,CADG,EAEPC,GAFO,CAEH,EAFG,EAGPC,KAHO,CAGD,iBAHC,EAIPxE,QAJO,EAHG;AAQbO,IAAAA,QAAQ,EAAE4D,aAAIE,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BE,KAA5B,CAAkC,EAAlC,EAAsCA,KAAtC,CAA4C,IAA5C,CARG;AASb7D,IAAAA,IAAI,EAAEuD,aAAIE,MAAJ;AATO,GAAf;AAYA,SAAOF,aAAIO,QAAJ,CAAaT,IAAb,EAAmBC,MAAnB,CAAP;AACD,CAdM;;;;AAgBP,MAAMS,IAAI,GAAGhF,kBAASiF,KAAT,CAAe,MAAf,EAAuBhF,UAAvB,CAAb;;eAEe+E,I","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport Joi from 'joi';\nimport { isValidUrl } from '../utils/utils';\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    provider: {\n      type: String,\n      required: true,\n    },\n    username: {\n      type: String,\n      lowercase: true,\n      unique: true,\n      required: [true, \"can't be blank\"],\n      match: [/^[a-zA-Z0-9_]+$/, 'is invalid'],\n      index: true,\n    },\n    email: {\n      type: String,\n      lowercase: true,\n      unique: true,\n      required: [true, \"can't be blank\"],\n      match: [/\\S+@\\S+\\.\\S+/, 'is invalid'],\n      index: true,\n    },\n    password: {\n      type: String,\n      trim: true,\n      minlength: 6,\n      maxlength: 60,\n    },\n    avatar: String,\n    role: { type: String, default: 'USER' },\n    bio: String,\n    // google\n    googleId: {\n      type: String,\n      unique: true,\n      sparse: true,\n    },\n    // fb\n    // facebookId: {\n    //   type: String,\n    //   unique: true,\n    //   sparse: true,\n    // },\n    // messages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Message' }],\n  },\n  { timestamps: true },\n);\n\n// console.log(join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH));\n\nuserSchema.methods.toJSON = function () {\n  // if not exists avatar1 default\n  const absoluteAvatarFilePath = `${join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH)}${this.avatar}`;\n  const avatar = isValidUrl(this.avatar)\n    ? this.avatar\n    : fs.existsSync(absoluteAvatarFilePath)\n    ? `${process.env.IMAGES_FOLDER_PATH}${this.avatar}`\n    : `${process.env.IMAGES_FOLDER_PATH}avatar2.jpg`;\n\n  return {\n    id: this._id.toString(),\n    provider: this.provider,\n    email: this.email,\n    username: this.username,\n    avatar: avatar,\n    // name: this.name,\n    role: this.role,\n    createdAt: this.createdAt,\n    updatedAt: this.updatedAt,\n  };\n};\n\nconst isProduction = process.env.NODE_ENV === 'production';\nconst secretOrKey = isProduction ? process.env.JWT_SECRET_PROD : process.env.JWT_SECRET_DEV;\n\nuserSchema.methods.generateJWT = function () {\n  const token = jwt.sign(\n    {\n      expiresIn: '12h',\n      id: this._id,\n      provider: this.provider,\n      email: this.email,\n    },\n    secretOrKey,\n  );\n  return token;\n};\n\nuserSchema.methods.registerUser = (newUser, callback) => {\n  bcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(newUser.password, salt, (errh, hash) => {\n      if (err) {\n        console.log(err);\n      }\n      // set pasword to hash\n      newUser.password = hash;\n      newUser.save(callback);\n    });\n  });\n};\n\nuserSchema.methods.comparePassword = function (candidatePassword, callback) {\n  bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\n    if (err) return callback(err);\n    callback(null, isMatch);\n  });\n};\n\n// const delay = (t, ...vs) => new Promise(r => setTimeout(r, t, ...vs)) or util.promisify(setTimeout)\n\nexport async function hashPassword(password) {\n  const saltRounds = 10;\n\n  const hashedPassword = await new Promise((resolve, reject) => {\n    bcrypt.hash(password, saltRounds, function (err, hash) {\n      if (err) reject(err);\n      else resolve(hash);\n    });\n  });\n\n  return hashedPassword;\n}\n\nexport const validateUser = (user) => {\n  const schema = {\n    avatar: Joi.any(),\n    // name: Joi.string().min(2).max(30).required(),\n    username: Joi.string()\n      .min(2)\n      .max(20)\n      .regex(/^[a-zA-Z0-9_]+$/)\n      .required(),\n    password: Joi.string().min(6).max(20).allow('').allow(null),\n    role: Joi.string()\n  };\n\n  return Joi.validate(user, schema);\n};\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;\n"],"file":"User.js"}