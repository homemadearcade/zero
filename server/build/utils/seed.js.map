{"version":3,"sources":["../../src/utils/seed.js"],"names":["seedDb","console","log","User","deleteMany","Message","__dirname","process","env","IMAGES_FOLDER_PATH","usersPromises","Array","keys","map","index","i","user","provider","username","email","password","avatar","bio","faker","lorem","sentences","role","Promise","all","registerUser","messagePromises","message","text","save","users","find","messages","threeMessagesIds","slice","m","id","updateOne","_id","$push","j","Math","floor","length","$set"],"mappings":"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","sourcesContent":["import faker from 'faker';\nimport { join } from 'path';\n\nimport User, { hashPassword } from '../models/User';\nimport Message from '../models/Message';\nimport { deleteAllAvatars } from './utils';\n\nexport const seedDb = async () => {\n  console.log('Seeding database...');\n\n  await User.deleteMany({});\n  await Message.deleteMany({});\n  await deleteAllAvatars(join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH));\n  // create 3 users\n  const usersPromises = [...Array(3).keys()].map((index, i) => {\n    const user = new User({\n      provider: 'email',\n      username: `user${index}`,\n      email: `email${index}@email.com`,\n      password: '123456789',\n      // name: faker.name.findName(),\n      // avatar: faker.image.avatar(),\n      avatar: `avatar${index}.jpg`,\n      bio: faker.lorem.sentences(3),\n    });\n\n    if (index === 0) {\n      user.role = 'ADMIN';\n    }\n    \n    return user;\n  });\n\n  await Promise.all(\n    usersPromises.map(async (user) => {\n      user.registerUser(user, () => {});\n    }),\n  );\n\n  // create 9 messages\n  const messagePromises = [...Array(9).keys()].map((index, i) => {\n    const message = new Message({\n      text: faker.lorem.sentences(3),\n    });\n    return message;\n  });\n\n  await Promise.all(\n    messagePromises.map(async (message) => {\n      await message.save();\n    }),\n  );\n\n  const users = await User.find();\n  const messages = await Message.find();\n\n  // every user 3 messages\n  users.map(async (user, index) => {\n    const threeMessagesIds = messages.slice(index * 3, index * 3 + 3).map((m) => m.id);\n    await User.updateOne({ _id: user.id }, { $push: { messages: threeMessagesIds } });\n  });\n\n  // 0,1,2 message belong to user 0 ...\n  messages.map(async (message, index) => {\n    const j = Math.floor(index / 3);\n    const user = users[j];\n    console.log(user, users.length, j)\n    await Message.updateOne(\n      { _id: message.id },\n      {\n        $set: {\n          user: user.id,\n        },\n      },\n    );\n  });\n};\n"],"file":"seed.js"}