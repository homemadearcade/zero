{"version":3,"sources":["../../../src/routes/api/codrawing.js"],"names":["router","post","requireJwtAuth","requireSocketAuth","req","res","socket","join","params","id","io","to","emit","ON_CODRAWING_SUBSCRIBED","userId","user","canvasId","status","json","err","message","leave","send","put","ON_CODRAWING_STROKE","brushId","body","stroke"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAoBC,uBAApB,EAAoCC,0BAApC,EAAuD,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzE,MAAI;AACFD,IAAAA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgB,eAAaH,GAAG,CAACI,MAAJ,CAAWC,EAAxC;AACAL,IAAAA,GAAG,CAACM,EAAJ,CAAOC,EAAP,CAAU,eAAaP,GAAG,CAACI,MAAJ,CAAWC,EAAlC,EAAsCG,IAAtC,CAA2CC,kCAA3C,EAAoE;AAAEC,MAAAA,MAAM,EAAEV,GAAG,CAACW,IAAJ,CAASN,EAAnB;AAAuBO,MAAAA,QAAQ,EAAEZ,GAAG,CAACI,MAAJ,CAAWC;AAA5C,KAApE;AAEAJ,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZd,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,MAAAA,OAAO,EAAE,2BAA2BD;AAAtC,KAArB;AACD;AACF,CATD;AAWAnB,MAAM,CAACC,IAAP,CAAY,WAAZ,EAAyBC,uBAAzB,EAAyCC,0BAAzC,EAA4D,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9E,MAAI;AACFD,IAAAA,GAAG,CAACE,MAAJ,CAAWe,KAAX,CAAiB,eAAajB,GAAG,CAACI,MAAJ,CAAWC,EAAzC;AACAJ,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBK,IAAhB;AACD,GAHD,CAGE,OAAOH,GAAP,EAAY;AACZd,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,MAAAA,OAAO,EAAE,2BAA2BD;AAAtC,KAArB;AACD;AACF,CAPD;AASAnB,MAAM,CAACuB,GAAP,CAAW,aAAX,EAA0BrB,uBAA1B,EAA0CC,0BAA1C,EAA6D,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/E,MAAI;AACFD,IAAAA,GAAG,CAACM,EAAJ,CAAOC,EAAP,CAAU,eAAaP,GAAG,CAACI,MAAJ,CAAWC,EAAlC,EAAsCG,IAAtC,CAA2CY,8BAA3C,EAAgE;AAC9DV,MAAAA,MAAM,EAAEV,GAAG,CAACW,IAAJ,CAASN,EAD6C;AAE9DO,MAAAA,QAAQ,EAAEZ,GAAG,CAACI,MAAJ,CAAWC,EAFyC;AAG9DgB,MAAAA,OAAO,EAAErB,GAAG,CAACsB,IAAJ,CAASD,OAH4C;AAI9DE,MAAAA,MAAM,EAAEvB,GAAG,CAACsB,IAAJ,CAASC;AAJ6C,KAAhE;AAOAtB,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBK,IAAhB;AACD,GATD,CASE,OAAOH,GAAP,EAAY;AACZd,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,MAAAA,OAAO,EAAE,2BAA2BD;AAAtC,KAArB;AACD;AACF,CAbD;eAeenB,M","sourcesContent":["import { Router } from 'express';\nimport requireJwtAuth from '../../middleware/requireJwtAuth';\nimport requireSocketAuth from '../../middleware/requireSocketAuth';\n\nimport { ON_CODRAWING_STROKE, ON_CODRAWING_SUBSCRIBED } from '../../constants';\n\nconst router = Router();\n\nrouter.post('/:id', requireJwtAuth, requireSocketAuth, async (req, res) => {\n  try {\n    req.socket.join('codrawing@'+req.params.id);\n    req.io.to('codrawing@'+req.params.id).emit(ON_CODRAWING_SUBSCRIBED, { userId: req.user.id, canvasId: req.params.id });\n    \n    res.status(200).json({ });\n  } catch (err) {\n    res.status(500).json({ message: 'Something went wrong. ' + err });\n  }\n});\n\nrouter.post('/stop/:id', requireJwtAuth, requireSocketAuth, async (req, res) => {\n  try {\n    req.socket.leave('codrawing@'+req.params.id);    \n    res.status(200).send()\n  } catch (err) {\n    res.status(500).json({ message: 'Something went wrong. ' + err });\n  }\n});\n\nrouter.put('/stroke/:id', requireJwtAuth, requireSocketAuth, async (req, res) => {\n  try {\n    req.io.to('codrawing@'+req.params.id).emit(ON_CODRAWING_STROKE, {\n      userId: req.user.id,\n      canvasId: req.params.id,\n      brushId: req.body.brushId,\n      stroke: req.body.stroke\n    });\n\n    res.status(200).send();\n  } catch (err) {\n    res.status(500).json({ message: 'Something went wrong. ' + err });\n  }\n});\n\nexport default router;\n"],"file":"codrawing.js"}