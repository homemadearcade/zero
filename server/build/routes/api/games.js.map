{"version":3,"sources":["../../../src/routes/api/games.js"],"names":["router","get","req","res","games","Game","find","sort","createdAt","select","populate","json","map","m","toJSON","err","console","error","status","message","game","findById","params","id","post","requireJwtAuth","body","details","userId","user","role","create","objects","metadata","hero","classes","brushes","colors","awsImages","world","execPopulate","put","requireSocketAuth","tempGame","updatedGame","gameUpdate","Object","keys","forEach","key","undefined","log","findByIdAndUpdate","new","lobbyId","io","to","emit","ON_GAME_MODEL_UPDATE","socket"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport requireJwtAuth from '../../middleware/requireJwtAuth';\nimport requireSocketAuth from '../../middleware/requireSocketAuth';\nimport Game, { validateGame } from '../../models/Game';\nimport { mergeDeep } from '../../utils/utils';\nimport { ON_GAME_MODEL_UPDATE} from '../../constants';\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  try {\n    const games = await Game.find().sort({ createdAt: 'desc' }).select('user createdAt updatedAt metadata').populate('user');\n\n    res.json({\n      games: games.map((m) => {\n        return m.toJSON();\n      }),\n    });\n  } catch (err) {\n    console.error(err)\n    res.status(500).json({ message: 'Something went wrong.' });\n  }\n});\n\nrouter.get('/:id', async (req, res) => {\n  try {\n    const game = await Game.findById(req.params.id).populate('user');\n    if (!game) return res.status(404).json({ message: 'No game found.' });\n    res.json({ game: game.toJSON() });\n  } catch (err) {\n    console.error(err)\n    res.status(500).json({ message: 'Something went wrong.' });\n  }\n});\n\nrouter.post('/', requireJwtAuth, async (req, res) => {\n  const { error } = validateGame(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n\n  if (!(req.body.userId === req.user.id || req.user.role === 'ADMIN')) {\n    return res.status(400).json({ message: 'Not created by the game owner or admin.' });\n  }\n\n  try {\n    let game = await Game.create({\n      objects: req.body.objects, \n      metadata: req.body.metadata, \n      hero: req.body.hero, \n      classes: req.body.classes,\n      brushes: req.body.brushes,\n      colors: req.body.colors,\n      awsImages: req.body.awsImages,\n      world: req.body.world, \n      user: req.body.userId,\n    });\n\n    game = await game.populate('user').execPopulate();\n\n    res.status(200).json({ game: game.toJSON() });\n  } catch (err) {\n    console.error(err)\n    res.status(500).json({ message: 'Something went wrong.' });\n  }\n});\n\n// router.delete('/:id', requireJwtAuth, async (req, res) => {\n//   try {\n//     const tempGame = await Game.findById(req.params.id).populate('user');\n//     if (!(tempGame.user.id === req.user.id || req.user.role === 'ADMIN'))\n//       return res.status(400).json({ game: 'Not the game owner or admin.' });\n\n//     const game = await Game.findByIdAndRemove(req.params.id).populate('user');\n//     if (!game) return res.status(404).json({ game: 'No game found.' });\n//     res.status(200).json({ game });\n//   } catch (err) {\n  // console.error(err)\n//     res.status(500).json({ game: 'Something went wrong.' });\n//   }\n// });\n\nrouter.put('/:id', requireJwtAuth, requireSocketAuth, async (req, res) => {\n  try {\n    const tempGame = await Game.findById(req.params.id).populate('user');\n    if (!tempGame) return res.status(404).json({ message: 'No game found.' });\n    if (!(tempGame.user.id === req.user.id || req.user.role === 'ADMIN'))\n      return res.status(400).json({ message: 'Not updated by the game owner or admin.' });\n\n    const updatedGame = mergeDeep(tempGame, req.body.gameUpdate)\n\n    Object.keys(updatedGame.objects).forEach(key => {\n      if (updatedGame.objects[key] === null || updatedGame.objects[key] === undefined) {\n        console.log('deleting object', key)\n        delete updatedGame.objects[key];\n      }\n    });\n\n    Object.keys(updatedGame.classes).forEach(key => {\n      if (updatedGame.classes[key] === null || updatedGame.classes[key] === undefined) {\n        console.log('deleting class', key)\n        delete updatedGame.classes[key];\n      }\n    });\n\n    const { error } = validateGame(updatedGame);\n    if (error) return res.status(400).json({ message: error.details[0].message });\n  \n    await Game.findByIdAndUpdate(\n      req.params.id,\n      { \n        objects: updatedGame.objects, \n        metadata: updatedGame.metadata, \n        hero: updatedGame.hero, \n        classes: updatedGame.classes,\n        brushes: updatedGame.brushes,\n        colors: updatedGame.colors,\n        awsImages: updatedGame.awsImages,\n        world: updatedGame.world, \n        user: tempGame.user.id \n      },\n      { new: true },\n    );\n\n    if(req.body.lobbyId) {\n      req.io.to(req.body.lobbyId).emit(ON_GAME_MODEL_UPDATE, req.body.gameUpdate)\n    } else {\n      //local edit mode\n      req.socket.emit(ON_GAME_MODEL_UPDATE, req.body.gameUpdate)\n    }\n    \n    res.status(200).json({ game: updatedGame });\n  } catch (err) {\n    console.error(err)\n    res.status(500).json({ message: 'Something went wrong.' });\n  }\n});\n\nexport default router;\n"],"file":"games.js"}