// write a react component that is a list of mui MenuItems
//

import { MenuItem } from "@mui/material";
import { connect } from "react-redux";
import { compose } from "redux";
import { dataSourceToDisplayName, dataSourceToIcon, DATA_SOURCE_AUTOGENERATED, DATA_SOURCE_CORE_LIBRARY, IS_DATA_REMOVED } from "../../../game/constants";
import { mapCobrowsingState } from "../../../utils";
import Checkbox from "../../Checkbox/Checkbox";
import { toggleSelectorClassInvisibility } from "../../../store/actions/game/gameSelectorActions";

function DataSourceVisibilityMenu({ selectorClass, gameSelector: { selectorClassInvisibility }, toggleSelectorClassInvisibility }) {

  function renderSelectorListCheckbox(dataSource) {
    return <Checkbox size="small" icon={dataSourceToIcon[dataSource]} checked={!selectorClassInvisibility[selectorClass]?.[dataSource]} onChange={() => {
      toggleSelectorClassInvisibility(selectorClass, dataSource)
    }} label={dataSourceToDisplayName[dataSource]}></Checkbox>
  }

  function getSelectorListVisibility() {
    const menuItems = []

    // if(selectorClass !== DIALOGUE_ABSTRACT_IID && selectorClass !== CUTSCENE_ABSTRACT_IID) {
      menuItems.push(
        <MenuItem key={DATA_SOURCE_AUTOGENERATED+selectorClass} dense>{renderSelectorListCheckbox(DATA_SOURCE_AUTOGENERATED)}</MenuItem>
      )
      menuItems.push(
        <MenuItem key={DATA_SOURCE_CORE_LIBRARY+selectorClass} dense>{renderSelectorListCheckbox(DATA_SOURCE_CORE_LIBRARY)}</MenuItem>
      )
      
      // menuItems.push(
      //   <MenuItem>{renderSelectorListCheckbox(DATA_SOURCE_USER_LIBRARY)}</MenuItem>
      // )
    // }
      menuItems.push(
        <MenuItem key={IS_DATA_REMOVED+selectorClass}  divider dense><Checkbox size="small" icon="faTrash" checked={!selectorClassInvisibility[selectorClass]?.[IS_DATA_REMOVED]} onChange={() => {
          toggleSelectorClassInvisibility(selectorClass, IS_DATA_REMOVED)
        }} label="Removed"></Checkbox></MenuItem>
      )

    return menuItems
  }
  
  return getSelectorListVisibility()
}

const mapStateToProps = (state) => mapCobrowsingState(state, {
  gameSelector: state.gameSelector,
})
export default compose(
  connect(mapStateToProps, { toggleSelectorClassInvisibility }),
)(DataSourceVisibilityMenu);
