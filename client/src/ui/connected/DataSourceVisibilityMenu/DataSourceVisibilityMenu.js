// write a react component that is a list of mui MenuItems
//

import { MenuItem } from "@mui/material";
import { connect } from "react-redux";
import { compose } from "redux";
import { 
  dataSourceIdToDisplayName,
  dataSourceIdToIcon
} from "../../../game/constants";
import { mapCobrowsingState } from "../../../utils";
import Checkbox from "../../Checkbox/Checkbox";
import { toggleSelectorClassInvisibility } from "../../../store/actions/game/gameSelectorActions";
import Unlockable from "../../../game/cobrowsing/Unlockable/Unlockable";
import { DATA_SOURCE_AUTOGENERATED_IID, DATA_SOURCE_IMPORTED_GAME_MODEL, DATA_SOURCE_ENTITY_MODEL_IID, IS_DATA_REMOVED_IID,RELATION_TAG_ABSTRACT_IID, SELECT_RELATION_TAG_IID, DATA_SOURCE_SYSTEM_IID } from "../../../constants/interfaceIds";

function DataSourceVisibilityMenu({ interfaceId, gameSelector: { selectorInterfaceListInvisibility }, toggleSelectorClassInvisibility, cobrowsing: { isActivelyCobrowsing, isSubscribedCobrowsing } }) {

  function renderSelectorListCheckbox(dataSourceId) {
    return <Checkbox size="small" icon={dataSourceIdToIcon[dataSourceId]} checked={!selectorInterfaceListInvisibility[interfaceId]?.[dataSourceId]} onChange={() => {
      toggleSelectorClassInvisibility(interfaceId, dataSourceId)
    }} label={dataSourceIdToDisplayName[dataSourceId]}></Checkbox>
  }

  function getSelectorListVisibility() {
    const menuItems = []

    // if(interfaceId !== DIALOGUE_ABSTRACT_IID && interfaceId !== CUTSCENE_ABSTRACT_IID) {
      menuItems.push(
        <MenuItem key={DATA_SOURCE_AUTOGENERATED_IID+interfaceId} dense>{renderSelectorListCheckbox(DATA_SOURCE_AUTOGENERATED_IID)}</MenuItem>
      )
      menuItems.push(
        <MenuItem key={DATA_SOURCE_IMPORTED_GAME_MODEL+interfaceId} dense>{renderSelectorListCheckbox(DATA_SOURCE_IMPORTED_GAME_MODEL)}</MenuItem>
      )
      menuItems.push(
        <MenuItem key={DATA_SOURCE_SYSTEM_IID+interfaceId} dense>{renderSelectorListCheckbox(DATA_SOURCE_SYSTEM_IID)}</MenuItem>
      )


      if(interfaceId === RELATION_TAG_ABSTRACT_IID || interfaceId === SELECT_RELATION_TAG_IID) {
        menuItems.push(
          <MenuItem key={DATA_SOURCE_ENTITY_MODEL_IID+interfaceId} dense>{renderSelectorListCheckbox(DATA_SOURCE_ENTITY_MODEL_IID)}</MenuItem>
        )
      }
  
      menuItems.push(
        <Unlockable interfaceId={IS_DATA_REMOVED_IID}>
        <MenuItem key={IS_DATA_REMOVED_IID+interfaceId}  dense><Checkbox size="small" icon="faTrash" checked={!selectorInterfaceListInvisibility[interfaceId]?.[IS_DATA_REMOVED_IID]} onChange={() => {
          toggleSelectorClassInvisibility(interfaceId, IS_DATA_REMOVED_IID)
        }} label="Removed"></Checkbox></MenuItem>
        </Unlockable>
      )

    return menuItems
  }
  
  return getSelectorListVisibility()
}

const mapStateToProps = (state) => mapCobrowsingState(state, {
  gameSelector: state.gameSelector,
  cobrowsing: state.cobrowsing
})
export default compose(
  connect(mapStateToProps, { toggleSelectorClassInvisibility }),
)(DataSourceVisibilityMenu);
