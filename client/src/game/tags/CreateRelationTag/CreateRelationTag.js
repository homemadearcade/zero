/* eslint-disable react-hooks/exhaustive-deps */
import React, { useEffect } from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';
import './CreateRelationTag.scss';
import CobrowsingDialog from '../../cobrowsing/CobrowsingDialog/CobrowsingDialog';
import { mapCobrowsingState } from '../../../utils/cobrowsingUtils';
import { editGameModel } from '../../../store/actions/game/gameModelActions';
import Button from '../../../ui/Button/Button';
import { closeCreateRelationTag, updateCreateRelationTag } from '../../../store/actions/game/gameFormEditorActions';
import Unlockable from '../../cobrowsing/Unlockable/Unlockable';
import { CHANGE_RELATION_TAG_COLOR_IID } from '../../../constants/interfaceIds';
import RelationTagNameForm from '../RelationTagNameForm/RelationTagNameForm';
import AggregateColorSelect from '../../color/AggregateColorSelect/AggregateColorSelect';
import { DATA_SOURCE_AUTOGENERATED_IID, RELATION_TAG_ID_PREFIX } from '../../constants';
import { generateUniqueId } from '../../../utils/webPageUtils';
import Alert from '../../../ui/Alert/Alert';
import ReadOnlyWarning from '../../ui/ReadOnlyWarning/ReadOnlyWarning';

const CreateRelationTag = ({ updateCreateRelationTag, closeCreateRelationTag, editGameModel, gameFormEditor: { relationTag }, gameModel: { gameModel } }) => {

  useEffect(() => {
    if(!relationTag.relationTagId) {
      updateCreateRelationTag({ relationTagId: RELATION_TAG_ID_PREFIX+generateUniqueId(), isNew: true })
    }
  }, [])

  function handleClose() {
    closeCreateRelationTag()
  }

  function handleSubmit() {
    editGameModel({
      relationTags: {
        [relationTag.relationTagId] : {
          ...relationTag,
        }
      }
    })
    handleClose()
  }

  function renderButtons() {
    if(relationTag.isReadOnly) return <ReadOnlyWarning text={'This Relation Tag is Read only'} />
    return <Button disabled={relationTag.error || !relationTag.textureTint || relationTag.isReadOnly} type="submit" onClick={handleSubmit}>Save</Button>
  }

  return <CobrowsingDialog open onClose={handleClose}>
    <div className="CreateRelationTag">
      <RelationTagNameForm
        initialName={relationTag.name}
      />
        <AggregateColorSelect
          selectedColor={relationTag.textureTint}
          onSelectColor={(textureTint) => {
            updateCreateRelationTag({
              textureTint
            })
          }}
          onUnselectColor={() => {
            updateCreateRelationTag({
              textureTint: null
            })
          }}
      />
      {renderButtons()}
    </div>
  </CobrowsingDialog>
}

const mapStateToProps = (state) => mapCobrowsingState(state, {
  gameModel: state.gameModel,
  gameFormEditor: state.gameFormEditor
})

export default compose(
  connect(mapStateToProps, { closeCreateRelationTag, editGameModel, updateCreateRelationTag }),
)(CreateRelationTag);
