/* eslint-disable react-hooks/exhaustive-deps */
import React, { useEffect, useState } from 'react';
import { compose } from 'redux';
import { connect } from 'react-redux';

import './EntityBoxList.scss';
import EntityItem from '../EntityItem/EntityItem';
import { mapCobrowsingState } from '../../../utils/cobrowsingUtils';
import BorderedGrid from '../../../ui/BorderedGrid/BorderedGrid';
import CobrowsingAccordianList from '../../cobrowsing/CobrowsingAccordianList/CobrowsingAccordianList';
import { IS_DATA_HIDDEN, DATA_SOURCE_CORE_LIBRARY, DATA_SOURCE_USER_LIBRARY, DATA_SOURCE_AUTOGENERATED, dataSourceToDisplayName, dataSourceToIcon, dataSourceToInterfaceId, IS_DATA_REMOVED } from '../../constants';
import Typography from '../../../ui/Typography/Typography';
import { SELECTOR_ENTITY_BY_CLASS_IID } from '../../../constants/interfaceIds';
import Icon from '../../../ui/Icon/Icon';
import { updateOpenInterfaceId } from '../../../store/actions/game/gameSelectorActions';

const EntityBoxList = ({
  entityModels,
  updateOpenInterfaceId,
  onClose
}) => {
  const [accordians, setAccordians] = useState()
  const [openedBoxYet, setOpenedBoxYet] = useState(false)

  useEffect(() => {
    const accordians = []
    const dataSources = [DATA_SOURCE_CORE_LIBRARY, DATA_SOURCE_USER_LIBRARY, DATA_SOURCE_AUTOGENERATED, IS_DATA_HIDDEN, IS_DATA_REMOVED]
    dataSources.forEach((dataSource) => {
      const matchingEntityModels = entityModels.
        filter(filterEntityModels(dataSource)).
        map(renderEntityItem).filter((item) => !!item)
      
      // matchingEntityModels.push(<Unlockable interfaceId={PLAYER_ENTITY_ADD_IID}>
      //   <Button size="fit" 
      //     onClick={() => {
      //       openEditEntityGraphics(addDefaultValuesToPlayerEntity({...defaultPlayerEntity}))
      //     }}>
      //     +
      //   </Button>
      // </Unlockable>)

      if(!matchingEntityModels.length) return null

      accordians.push({
        dataSource,
        interfaceId: dataSourceToInterfaceId[dataSource],
        // interfaceId: PLAYER_ENTITY_CONTAINER_IID,
        // sx: layerInvisibility[PLAYER_ENTITY_IID] ? {opacity: hiddenOpacity} : {},
        title: <div style={{display: 'flex', alignItems: 'center', gap: '1em'}}>
          <Icon icon={dataSourceToIcon[dataSource]} />
          <Typography component="div" variant="subtitle1">{dataSourceToDisplayName[dataSource]} {`(${matchingEntityModels.length})`}</Typography>
        </div>,
        body: <>
          <BorderedGrid
            height="3.3em"
            width="3.95em"
            items={matchingEntityModels}
          />
        </>
      })
    })

    setAccordians(accordians.filter((accordian) => !!accordian))
  })

  useEffect(() => {
    if(accordians && accordians.length && !openedBoxYet) {
      updateOpenInterfaceId('BoxList', accordians[0].dataSource)
      setOpenedBoxYet(true)
    }
  }, [accordians])

  const renderEntityItem = (currentEntityModel, i) => {
    const el = <EntityItem key={i} entityModelId={currentEntityModel.entityModelId}/>
    return el
  }

  const filterEntityModels = (dataSource) => (currentEntityModel) => {   
    if(dataSource === IS_DATA_REMOVED) {
      if(currentEntityModel.isRemoved) return true
      return false
    }
    if(currentEntityModel.isRemoved) return 

    const isHidden = currentEntityModel.editorInterface.hiddenFromInterfaceIds[SELECTOR_ENTITY_BY_CLASS_IID]
    if(dataSource === IS_DATA_HIDDEN) {
      if(isHidden) return true
      return false
    }
    if(isHidden) return false

    if(currentEntityModel.dataSource === dataSource) {
      return true
    }

    return false
  }

  // function addDefaultValuesToPlayerEntity(entityModel) {
  //   const defaultType = gameModel.stages[currentStageId].defaultType
  //   if(!defaultType) return entityModel
  //   const defaultTypeProperties = stageDefaultTypeProperties[defaultType]
  //   const defaultEntityModel = entityModels[defaultTypeProperties].playerEntityModelId
  //   return {...entityModel, ...defaultEntityModel}
  // }
  
  if(accordians && !accordians.length) {
    return <div className="EntityBoxList">
      <Typography variant="body1">Nothing to see here!</Typography>
    </div>
  }

  if(!accordians) return null

  return <div className="EntityBoxList">
    <CobrowsingAccordianList
      interfaceGroupId="BoxList"
      accordians={accordians}
    />
  </div>
};

const mapStateToProps = (state) => mapCobrowsingState(state, {
  gameModel: state.gameModel,
})

export default compose(
  connect(mapStateToProps, { updateOpenInterfaceId  }),
)(EntityBoxList);
